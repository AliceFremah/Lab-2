import { faker } from '@faker-js/faker';
import { EmployeeData } from '../pages/EmployeePage';
import { LeaveRequest } from '../pages/LeavePage';

export class TestDataGenerator {
  static generateEmployee(): EmployeeData {
    const firstName = faker.person.firstName();
    const lastName = faker.person.lastName();
    const middleName = faker.datatype.boolean() ? faker.person.middleName() : undefined;
    
    return {
      firstName,
      middleName,
      lastName,
      employeeId: faker.string.numeric(6),
      jobTitle: faker.helpers.arrayElement([
        'Software Engineer',
        'QA Engineer', 
        'Project Manager',
        'Business Analyst',
        'HR Manager'
      ]),
      department: faker.helpers.arrayElement([
        'Engineering',
        'Quality Assurance',
        'Human Resources',
        'Sales',
        'Marketing'
      ]),
      location: faker.helpers.arrayElement([
        'New York Office',
        'London Office',
        'Toronto Office',
        'Sydney Office'
      ]),
      username: faker.internet.userName({ firstName, lastName }).toLowerCase(),
      password: 'Test@123'
    };
  }

  static generateMultipleEmployees(count: number): EmployeeData[] {
    return Array.from({ length: count }, () => this.generateEmployee());
  }

  static generateLeaveRequest(): LeaveRequest {
    const fromDate = faker.date.future();
    const toDate = faker.date.future({ refDate: fromDate });
    
    return {
      leaveType: faker.helpers.arrayElement([
        'Vacation Leave',
        'Sick Leave',
        'Personal Leave',
        'Emergency Leave'
      ]),
      fromDate: this.formatDate(fromDate),
      toDate: this.formatDate(toDate),
      comment: faker.lorem.sentence(),
      partialDays: faker.helpers.arrayElement([
        'All Days',
        'Start Day Only',
        'End Day Only',
        'Start and End Day'
      ])
    };
  }

  static generateLeaveRequestWithDateRange(daysFromNow: number, duration: number): LeaveRequest {
    const fromDate = new Date();
    fromDate.setDate(fromDate.getDate() + daysFromNow);
    
    const toDate = new Date(fromDate);
    toDate.setDate(toDate.getDate() + duration - 1);
    
    return {
      leaveType: 'Vacation Leave',
      fromDate: this.formatDate(fromDate),
      toDate: this.formatDate(toDate),
      comment: `Leave request generated by automation - ${faker.lorem.words(3)}`
    };
  }

  static generateUserCredentials() {
    const firstName = faker.person.firstName();
    const lastName = faker.person.lastName();
    
    return {
      username: faker.internet.userName({ firstName, lastName }).toLowerCase(),
      password: 'Test@123',
      employeeName: `${firstName} ${lastName}`,
      userRole: faker.helpers.arrayElement(['Admin', 'ESS']),
      status: 'Enabled'
    };
  }

  static generateJobTitle() {
    return {
      title: faker.person.jobTitle(),
      description: faker.lorem.paragraph()
    };
  }

  static generateLocation() {
    return {
      name: `${faker.location.city()} Office`,
      country: faker.location.country()
    };
  }

  private static formatDate(date: Date): string {
    return date.toISOString().split('T')[0]; // YYYY-MM-DD format
  }

  static generateTestEmail(): string {
    return faker.internet.email();
  }

  static generatePhoneNumber(): string {
    return faker.phone.number();
  }

  static generateAddress() {
    return {
      street: faker.location.streetAddress(),
      city: faker.location.city(),
      state: faker.location.state(),
      zipCode: faker.location.zipCode(),
      country: faker.location.country()
    };
  }

  static generateRandomText(words: number = 5): string {
    return faker.lorem.words(words);
  }

  static generateRandomNumber(min: number = 1, max: number = 1000): number {
    return faker.number.int({ min, max });
  }

  static generateUniqueId(): string {
    return faker.string.uuid();
  }

  // Helper method for generating test file names
  static generateFileName(extension: string = 'txt'): string {
    return `test-file-${faker.string.alphanumeric(8)}.${extension}`;
  }
}

// Pre-defined test data sets for consistent testing
export const COMMON_TEST_DATA = {
  invalidCredentials: [
    { username: 'invalid_user', password: 'invalid_pass' },
    { username: 'Admin', password: 'wrong_password' },
    { username: '', password: 'admin123' },
    { username: 'Admin', password: '' },
    { username: '', password: '' }
  ],
  
  leaveTypes: [
    'Vacation Leave',
    'Sick Leave', 
    'Personal Leave',
    'Maternity Leave',
    'Paternity Leave'
  ],

  jobTitles: [
    'Software Engineer',
    'Senior Software Engineer',
    'QA Engineer',
    'Project Manager',
    'Business Analyst',
    'HR Manager',
    'Finance Manager'
  ],

  departments: [
    'Engineering',
    'Quality Assurance',
    'Human Resources',
    'Finance',
    'Sales',
    'Marketing'
  ],

  locations: [
    'New York Office',
    'London Office', 
    'Toronto Office',
    'Sydney Office',
    'Remote'
  ]
};