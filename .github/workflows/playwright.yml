name: Playwright E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly regression tests at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1/3, 2/3, 3/3]
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Run Playwright tests
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # Run smoke tests on PR
          npx playwright test --project=${{ matrix.browser }} --grep="@smoke" --shard=${{ matrix.shard }}
        elif [[ "${{ github.event_name }}" == "schedule" ]]; then
          # Run full regression suite nightly
          npx playwright test --project=${{ matrix.browser }} --grep="@regression" --shard=${{ matrix.shard }}
        else
          # Run all tests on push to main/develop
          npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}
        fi
      env:
        CI: true
    
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}-${{ strategy.job-index }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30
    
    - name: Upload Allure Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results-${{ matrix.browser }}-${{ strategy.job-index }}
        path: allure-results/
        retention-days: 30

  publish-report:
    if: always()
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Merge Allure Results
      run: |
        mkdir -p merged-allure-results
        find . -name "allure-results*" -type d | while read dir; do
          if [ -d "$dir" ]; then
            cp -r "$dir"/* merged-allure-results/ 2>/dev/null || true
          fi
        done
    
    - name: Generate Allure Report
      uses: simple-elf/allure-report-action@master
      if: always()
      with:
        allure_results: merged-allure-results
        allure_report: allure-report
        gh_pages: gh-pages
        allure_history: allure-history
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: allure-history

  smoke-test-quick:
    # Quick smoke test for immediate feedback
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install chromium
    
    - name: Run smoke tests
      run: npx playwright test --project=chromium --grep="@smoke" --workers=1
    
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Read test results if available
          let message = 'üß™ **Playwright Smoke Tests Results**\n\n';
          
          try {
            const reportPath = path.join(process.cwd(), 'test-results');
            if (fs.existsSync(reportPath)) {
              const files = fs.readdirSync(reportPath);
              const failed = files.filter(f => f.includes('failed')).length;
              const passed = files.filter(f => f.includes('passed')).length;
              
              if (failed > 0) {
                message += `‚ùå **${failed} tests failed**\n`;
                message += `‚úÖ **${passed} tests passed**\n\n`;
                message += '‚ö†Ô∏è Please check the test failures before merging.';
              } else {
                message += `‚úÖ **All ${passed} smoke tests passed!**\n\n`;
                message += 'üöÄ Ready for review and merge.';
              }
            } else {
              message += '‚ÑπÔ∏è Test results not found. Check the workflow logs for details.';
            }
          } catch (error) {
            message += `‚ö†Ô∏è Error reading test results: ${error.message}`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install chromium
    
    - name: Run performance tests
      run: npx playwright test --project=chromium --grep="performance|load" || true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          performance-results/
          screenshots/
        retention-days: 7